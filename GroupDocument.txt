# Assignment 2.1 - Production Workflow Report (Group Component)
## Cover Sheet
___
### Team Name
- Patrick Nathanael Santoso (104523527)
- Sudhish Raveendran (104000460)
- Luke Cations (104272667)
- Hayden Rooke (103989733)

...
Class Time: Thursday 8:30
Tutor Name: Quoc Tien Pham
___
# Section 1: Group Skill/Task Selection
List each team member and their selected skills they intend to explore for
this project.
(Patrick)
1. VA01: Import 2D and 3D assets from an external program into a game engine, the asset must show in a level and be visible in the ‘game world’. 2D
Image must show transparency. 3D Asset must be unwrapped, textured, and also show transparency.
2. VA02: Import and work with sprite sheet animations into a game engine. Sprite sheet must loop in its animation, and demonstrate transparency.
Also look into how to make sprites not loop and only play once. Spritesheet must be visible when the game is running.
3. AU01: Import sound files into the engine. Figure out a way to trigger one-shot sounds, and have looping sounds. You will also need to figure out
how to trigger the sounds when the user interacts in the game with either a keypress or mouse click.
4. PR01: UI Programming. Set up a basic canvas, and hook into the button click events (with the mouse, but you’re welcome to explore keyboard or
gamepad events too).
5. PR02: Object manipulation. React to user inputs (such as mouse click or keyboard/gamepad) to do each of the following, with different events for::
A) Hide/show a game object. B) Create/instantiate a game object. C) Delete/destroy a game object.
6. VA05: Animate using keyframes for 2D and 3D objects *within* the game engine itself (not using an external program). These animations need to
be able to play in the running game. (Note that not all engines support an in-editor animator, so this option may not be available to you).
...
(Sudhish)
1. VA01: Import 2D and 3D assets from an external program into a game engine, the asset must show in a level and be visible in the ‘game world’. 2D
Image must show transparency. 3D Asset must be unwrapped, textured, and also show transparency
2. VA07:Create a 3D ‘arena’ or room, using only the engine, without any external programs. Plugins or addons are allowed. There needs to be a
minimum of 5 materials/textures created in the engine that are applied to the arena/room.
3. AU01:Import sound files into the engine. Figure out a way to trigger one-shot sounds, and have looping sounds. You will also need to figure out
how to trigger the sounds when the user interacts in the game with either a keypress or mouse click.
4. PR01:UI Programming. Set up a basic canvas, and hook into the button click events (with the mouse, but you’re welcome to explore keyboard or
gamepad events too).
5. PR06: Physics programming: React to a collision event and create an object at the collision location. A sound effect needs to also play when the
collision happens
6. PR10: Game mechanics: You can discuss a mechanic with your tutor and come up with your own! Objects deleting when they have zero health,
increasing a global score variable when certain conditions are met, etc...
7. ... (yes you can add,or change skills as you go, but make notes if you
skipped or stopped a skill attempt)
(Luke)
1. VA01: Import 2D and 3D assets from an external program into a game engine,
the asset must show in a level and be visible in the ‘game world’. 2D
Image must show transparency. 3D Asset must be unwrapped, textured, and
also show transparency.
2. VA07: Create a 3D ‘arena’ or room, using only the engine, without any
external programs. Plugins or addons are allowed. There needs to be a
minimum of 5 materials/textures created in the engine that are applied to
the arena/room.
3. AU01: Import sound files into the engine. Figure out a way to trigger one-
shot sounds, and have looping sounds. You will also need to figure out how
to trigger the sounds when the user interacts in the game with either a
keypress or mouse click.
4. PR01: UI Programming. Set up a basic canvas, and hook into the button
click events (with the mouse, but you’re welcome to explore keyboard or
gamepad events too).
5. PR02: Object manipulation. React to user inputs (such as mouse click or
keyboard/gamepad) to do each of the following, with different events for::
A) Hide/show a game object. B) Create/instantiate a game object. C)
Delete/destroy a game object.
6. PR03: Scene and settings: React to user inputs (such as mouse click or
keyboard/gamepad) to do each of the following, with different events for:
A) Switch screens/levels/scenes/worlds (and switch back). B) Exit the
game, C) Change game settings such as volume, resolution/window size,
fullscreen/windowed

(Hayden)
1. VA01: Import 2D and 3D assets from an external program into a game engine,
the asset must show in a level and be visible in the ‘game world’. 2D
Image must show transparency. 3D Asset must be unwrapped, textured, and
also show transparency.
2. VA02: Import and work with sprite sheet animations into a game engine.
Sprite sheet must loop in its animation, and demonstrate transparency.
Also look into how to make sprites not loop and only play once.
Spritesheet must be visible when the game is running.
3. VA03: Import a 3D animated object, and have its animation looped in the
running game. Also look into how to make the animation a ‘one shot’ (plays
only once).
4. VA07: Create a 3D ‘arena’ or room, using only the engine, without any
external programs. Plugins or addons are allowed. There needs to be a
minimum of 5 materials/textures created in the engine that are applied to
the arena/room.
5. VA09: Create a 3D dark room, and demonstrate various different lighting
objects. This needs to be visible in the running game. Explore ways to
achieve volumetric light to see if your engine supports it. Also explore
light emitting materials.
6. VA06: Create one permanent/looping particle system, and one ‘one shot’
particle system, within the engine itself. The particles must demonstrate
transparency, no shadows, and a custom texture/image, and motion. This
needs to be visible in the running game.

___
# Section 2: Tool Selection Questions
- Q: Which Game Engine did your group decide to use for this task? Why?
Also mention if you considered other engines and why.
> A:
- Q: Which Version Control System did you decide to use for this task?
Why? Any considerations for other VCSs?
> A:
- Q: Who contributed to the process of setting up the initial repository?
Have they worked with any VCSs before?
> A:
- Q: How was the process of setting up the 'ignore' configuration in your
chosen VCS? Easy/hard? Makes sense? Still confusing?
> A:
- Q: In terms of scheduling, do you have any plans about when people will
work together? Or will you be mostly working in your own schedules? Or
just going free form?
> A:
